/**
 * 发布组件到 Maven 私服
 * @version 1.1.0
 */

// maven 插件
apply plugin: 'maven'

// 打包的资源内容，关于 javaDoc 部分，至今未找到能用的
task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

// 加载属性，先从 local.properties 里拿，为空则再从 gradle.properties 获取
def loadProperty = { String propertyName ->
    File file = file("${rootDir.path}/local.properties")
    Properties localProperties = new Properties()
    localProperties.load(file.newDataInputStream())

    def value
    if (localProperties != null) {
        value = localProperties[propertyName]
    }
    if (value == null || value == "") {
        value = project.property(propertyName)
    }
    return value
}

// maven 打包并上传，发布到 maven-releases
uploadArchives {
    def maven_user = loadProperty("maven_release_user")
    def maven_password = loadProperty("maven_release_password")

    repositories.mavenDeployer {
        // Nexus 服务器地址与登录信息
        repository(url: "${maven_domain}/repository/maven-releases/") {
            authentication(userName: maven_user, password: maven_password)
        }

        // pom.xml 标签含义参考：http://www.javashuo.com/article/p-zlitehoa-eg.html
        pom.project {
            groupId ''
            artifactId ''
            version ''
            description ''
        }

        doLast {
            println "【${project.name}】项目，【${repository.authentication.userName}】用户，" +
                    "成功往【${repository.url}】发布版本：${pom.groupId}:${pom.artifactId}:${pom.version}"
        }
    }
}

// maven 打包并上传，发布到 maven-dev
task uploadDevArchives(group: 'upload') {
    def firstTask = gradle.startParameter.taskNames[0]
    if (firstTask != null && firstTask.endsWith('uploadDevArchives')) {
        uploadArchives {
            def maven_user = loadProperty("maven_user")
            def maven_password = loadProperty("maven_password")

            repositories.mavenDeployer {
                repository(url: "${maven_domain}/repository/maven-dev/") {
                    authentication(userName: maven_user, password: maven_password)
                }
            }
        }
        uploadDevArchives.dependsOn uploadArchives
    }
}

ext {
    /**
     * boolean，true：当前执行的任务里包含 maven 发布
     */
    isMavenUpload = {
        for (def taskName : gradle.startParameter.taskNames) {
            if (taskName == 'uploadArchives'
                    || taskName == 'uploadDevArchives') {
                return true
            }
        }
        return false
    }
}
